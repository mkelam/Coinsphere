// Coinsphere - Prisma Schema
// Database: PostgreSQL 15 + TimescaleDB

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User Authentication & Profile
model User {
  id            String   @id @default(uuid())
  email         String   @unique
  passwordHash  String   @map("password_hash")
  emailVerified Boolean  @default(false) @map("email_verified")

  // Profile
  firstName     String?  @map("first_name")
  lastName      String?  @map("last_name")
  avatarUrl     String?  @map("avatar_url")
  role          String   @default("user") // user, admin

  // Two-Factor Authentication
  twoFactorEnabled Boolean @default(false) @map("two_factor_enabled")
  twoFactorSecret  String?  @map("two_factor_secret") // Encrypted TOTP secret

  // Subscription
  subscriptionTier String @default("free") @map("subscription_tier") // free, plus, pro, power_trader
  subscriptionStatus String @default("active") @map("subscription_status") // active, cancelled, past_due

  // Timestamps
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")
  lastLoginAt   DateTime? @map("last_login_at")

  // Relations
  portfolios           Portfolio[]
  alerts               Alert[]
  apiKeys              ApiKey[]
  emailVerifications   EmailVerification[]
  passwordResets       PasswordReset[]
  auditLogs            AuditLog[]
  paymentIntents       PaymentIntent[]
  exchangeConnections  ExchangeConnection[]
  walletConnections    WalletConnection[]

  @@map("users")
}

// Crypto Token Metadata
model Token {
  id            String   @id @default(uuid())
  symbol        String   @unique // BTC, ETH, SOL
  name          String   // Bitcoin, Ethereum, Solana
  coingeckoId   String?  @unique @map("coingecko_id")

  // Token Details
  blockchain    String   // ethereum, solana, bitcoin, etc
  contractAddress String? @map("contract_address")
  decimals      Int?
  logoUrl       String?  @map("logo_url")

  // Market Data (cached) - Using Decimal for precision
  currentPrice  Decimal? @db.Decimal(18, 8) @map("current_price")
  marketCap     Decimal? @db.Decimal(24, 2) @map("market_cap")
  volume24h     Decimal? @db.Decimal(24, 2) @map("volume_24h")
  priceChange24h Decimal? @db.Decimal(10, 4) @map("price_change_24h")

  // Timestamps
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  // Relations
  holdings      Holding[]
  transactions  Transaction[]
  predictions   Prediction[]
  riskScores    RiskScore[]

  @@map("tokens")
}

// User Portfolio Holdings
model Portfolio {
  id            String   @id @default(uuid())
  userId        String   @map("user_id")
  name          String   @default("Main Portfolio")
  description   String?
  icon          String   @default("ðŸ’¼") // Emoji icon for portfolio
  currency      String   @default("USD") // Base currency (USD, EUR, BTC, etc)
  isActive      Boolean  @default(false) @map("is_active") // Is this the active portfolio

  // Timestamps
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  // Relations
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  holdings      Holding[]
  transactions  Transaction[]

  @@map("portfolios")
  @@index([userId])
  @@index([userId, isActive]) // Index for finding active portfolio
}

// Individual Holdings
model Holding {
  id            String   @id @default(uuid())
  portfolioId   String   @map("portfolio_id")
  tokenId       String   @map("token_id")

  // Holding Details - Using Decimal for precision
  amount        Decimal  @db.Decimal(24, 8)
  averageBuyPrice Decimal? @db.Decimal(18, 8) @map("average_buy_price")
  source        String?  // exchange, wallet, manual
  sourceId      String?  @map("source_id") // exchange account ID or wallet address

  // Timestamps
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  // Relations
  portfolio     Portfolio @relation(fields: [portfolioId], references: [id], onDelete: Cascade)
  token         Token     @relation(fields: [tokenId], references: [id])

  @@map("holdings")
  @@unique([portfolioId, tokenId])
  @@index([portfolioId])
  @@index([tokenId])
}

// Portfolio Transactions
model Transaction {
  id            String   @id @default(uuid())
  portfolioId   String   @map("portfolio_id")
  tokenId       String   @map("token_id")

  // Transaction Details - Using Decimal for precision
  type          String   // buy, sell, transfer_in, transfer_out, swap
  amount        Decimal  @db.Decimal(24, 8) // Amount of token
  price         Decimal  @db.Decimal(18, 8) // Price per token at time of transaction
  fee           Decimal  @db.Decimal(18, 8) @default(0) // Transaction fee
  feeToken      String?  @map("fee_token") // Token used for fee (e.g., ETH for gas)

  // Transaction Context
  notes         String?  // User notes
  txHash        String?  @map("tx_hash") // Blockchain transaction hash
  exchange      String?  // Exchange where transaction occurred
  timestamp     DateTime @default(now()) // When transaction occurred

  // Timestamps
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  // Relations
  portfolio     Portfolio @relation(fields: [portfolioId], references: [id], onDelete: Cascade)
  token         Token     @relation(fields: [tokenId], references: [id])

  @@map("transactions")
  @@index([portfolioId])
  @@index([tokenId])
  @@index([timestamp])
  @@index([type])
}

// Price Predictions (Historical Tracking)
model Prediction {
  id            String   @id @default(uuid())
  tokenId       String   @map("token_id")

  // Prediction Details - Using Decimal for precision
  timeframe     String   // 7d, 14d, 30d
  direction     String   // bullish, bearish, neutral
  predictedPrice Decimal @db.Decimal(18, 8) @map("predicted_price")
  priceAtPrediction Decimal @db.Decimal(18, 8) @map("price_at_prediction") // Current price when prediction was made
  targetPriceRange Json   @map("target_price_range") // {low, high}
  confidence    Decimal  @db.Decimal(5, 4) // 0.0000-1.0000
  confidenceScore Decimal @db.Decimal(5, 4) @map("confidence_score") // Raw confidence score

  // Model Info
  modelVersion  String   @map("model_version")
  modelType     String?  @map("model_type") // single, ensemble
  ensembleMethod String? @map("ensemble_method") // weighted_average, majority_voting, max_confidence
  features      Json?    // Store feature values used (RSI, MACD, etc.)

  // Actual Outcome (populated after prediction period ends)
  actualPrice   Decimal? @db.Decimal(18, 8) @map("actual_price") // Actual price at target date
  outcomeCalculatedAt DateTime? @map("outcome_calculated_at")
  wasCorrect    Boolean? @map("was_correct") // Did price move in predicted direction?
  accuracyScore Decimal? @db.Decimal(5, 4) @map("accuracy_score") // How close was the prediction? (0-1)
  priceError    Decimal? @db.Decimal(10, 4) @map("price_error") // Absolute error percentage

  // Timestamps
  createdAt     DateTime @default(now()) @map("created_at")
  targetDate    DateTime @map("target_date") // When prediction should be evaluated
  expiresAt     DateTime @map("expires_at") // When prediction data is no longer fresh

  // Relations
  token         Token    @relation(fields: [tokenId], references: [id])

  @@map("predictions")
  @@index([tokenId])
  @@index([createdAt])
  @@index([targetDate])
  @@index([timeframe])
  @@index([modelVersion])
  @@index([wasCorrect])
}

// Degen Risk Scores
model RiskScore {
  id            String   @id @default(uuid())
  tokenId       String   @map("token_id")

  // Risk Score (0-100)
  overallScore  Int      @map("overall_score")

  // Component Scores
  liquidityScore Int?    @map("liquidity_score")
  volatilityScore Int?   @map("volatility_score")
  contractScore Int?     @map("contract_score")
  holderScore   Int?     @map("holder_score")

  // Details
  analysis      Json?    // Store detailed analysis

  // Timestamps
  createdAt     DateTime @default(now()) @map("created_at")
  expiresAt     DateTime @map("expires_at")

  // Relations
  token         Token    @relation(fields: [tokenId], references: [id])

  @@map("risk_scores")
  @@index([tokenId])
  @@index([createdAt])
}

// User Alerts
model Alert {
  id            String   @id @default(uuid())
  userId        String   @map("user_id")

  // Alert Configuration - Using Decimal for price thresholds
  alertType     String   @map("alert_type") // price, risk, prediction
  tokenSymbol   String   @map("token_symbol")
  condition     String   // above, below, equals
  threshold     Decimal  @db.Decimal(18, 8)

  // Status
  isActive      Boolean  @default(true) @map("is_active")
  lastTriggered DateTime? @map("last_triggered")
  triggerCount  Int      @default(0) @map("trigger_count")

  // Timestamps
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  // Relations
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("alerts")
  @@index([userId])
  @@index([isActive])
}

// API Keys for Programmatic Access
model ApiKey {
  id            String   @id @default(uuid())
  userId        String   @map("user_id")

  // Key Details
  name          String
  keyHash       String   @unique @map("key_hash") // Hashed API key
  lastUsedAt    DateTime? @map("last_used_at")

  // Permissions
  scopes        String[] @default(["read:portfolio"]) // read:portfolio, write:portfolio, etc

  // Status
  isActive      Boolean  @default(true) @map("is_active")

  // Timestamps
  createdAt     DateTime @default(now()) @map("created_at")
  expiresAt     DateTime? @map("expires_at")

  // Relations
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("api_keys")
  @@index([userId])
}

// Time-Series Price Data (TimescaleDB hypertable)
// Note: This will be created via raw SQL after migration
model PriceData {
  time          DateTime
  tokenId       String   @map("token_id")

  // OHLCV - Using Decimal for precision
  open          Decimal  @db.Decimal(18, 8)
  high          Decimal  @db.Decimal(18, 8)
  low           Decimal  @db.Decimal(18, 8)
  close         Decimal  @db.Decimal(18, 8)
  volume        Decimal  @db.Decimal(24, 8)

  @@id([time, tokenId])
  @@map("price_data")
  @@index([tokenId])
}

// Email Verification Tokens
model EmailVerification {
  id            String   @id @default(uuid())
  userId        String   @map("user_id")
  token         String   @unique

  // Status
  isUsed        Boolean  @default(false) @map("is_used")

  // Timestamps
  createdAt     DateTime @default(now()) @map("created_at")
  expiresAt     DateTime @map("expires_at")

  // Relations
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("email_verifications")
  @@index([userId])
  @@index([token])
  @@index([expiresAt])
}

// Password Reset Tokens
model PasswordReset {
  id            String   @id @default(uuid())
  userId        String   @map("user_id")
  token         String   @unique

  // Status
  isUsed        Boolean  @default(false) @map("is_used")

  // Timestamps
  createdAt     DateTime @default(now()) @map("created_at")
  expiresAt     DateTime @map("expires_at")

  // Relations
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("password_resets")
  @@index([userId])
  @@index([token])
  @@index([expiresAt])
}

// Audit Logs for Security-Sensitive Operations
model AuditLog {
  id            String   @id @default(uuid())
  userId        String?  @map("user_id") // Nullable for failed auth attempts

  // Event Details
  action        String   // login, logout, password_reset, token_create, user_update, admin_action, etc.
  resource      String?  // Resource type (user, token, portfolio, etc.)
  resourceId    String?  @map("resource_id") // ID of the affected resource
  status        String   // success, failure, error

  // Request Context
  ipAddress     String?  @map("ip_address")
  userAgent     String?  @map("user_agent")
  method        String?  // GET, POST, PUT, DELETE
  path          String?  // API endpoint path

  // Additional Details
  metadata      Json?    // Store additional context (e.g., changed fields, error messages)
  errorMessage  String?  @map("error_message")

  // Timestamp
  createdAt     DateTime @default(now()) @map("created_at")

  // Relations
  user          User?    @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@map("audit_logs")
  @@index([userId])
  @@index([action])
  @@index([createdAt])
  @@index([status])
  @@index([ipAddress])
}

// Payment Intents for PayFast and other payment gateways
model PaymentIntent {
  id            String   @id @default(uuid())
  userId        String   @map("user_id")

  // Payment Gateway Details
  provider      String   // payfast
  referenceId   String   @unique @map("reference_id") // External payment reference
  amount        Decimal  @db.Decimal(18, 2)
  currency      String   @default("USD")

  // Subscription Details
  plan          String   // plus, pro, power-trader
  status        String   // pending, completed, cancelled, failed

  // Additional Data
  metadata      Json?    // Store additional payment context

  // Timestamps
  createdAt     DateTime @default(now()) @map("created_at")
  completedAt   DateTime? @map("completed_at")

  // Relations
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("payment_intents")
  @@index([userId])
  @@index([status])
  @@index([referenceId])
}

// Exchange Connections for API Integration
model ExchangeConnection {
  id            String   @id @default(uuid())
  userId        String   @map("user_id")

  // Exchange Details
  exchange      String   // binance, coinbase, kraken, etc.
  label         String?  // User-friendly name for the connection

  // Encrypted API Credentials (AES-256-GCM)
  apiKeyEncrypted    String   @map("api_key_encrypted")
  apiSecretEncrypted String   @map("api_secret_encrypted")
  passphraseEncrypted String? @map("passphrase_encrypted") // For Coinbase Pro

  // Connection Status
  status        String   @default("active") // active, disabled, error
  lastSyncAt    DateTime? @map("last_sync_at")
  lastError     String?   @map("last_error")

  // Sync Configuration
  autoSync      Boolean  @default(true) @map("auto_sync")
  syncInterval  Int      @default(300) @map("sync_interval") // Seconds between syncs

  // Timestamps
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  // Relations
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("exchange_connections")
  @@index([userId])
  @@index([status])
  @@index([lastSyncAt])
}

// Wallet Connections for DeFi Tracking
model WalletConnection {
  id            String   @id @default(uuid())
  userId        String   @map("user_id")

  // Wallet Details
  address       String   // Wallet address (e.g., 0x123...)
  label         String?  // User-friendly name
  blockchain    String   // ethereum, bsc, polygon, etc.
  walletType    String   @map("wallet_type") // metamask, walletconnect, manual

  // Connection Status
  status        String   @default("active") // active, disabled
  lastSyncAt    DateTime? @map("last_sync_at")
  lastError     String?   @map("last_error")

  // Sync Configuration
  autoSync      Boolean  @default(true) @map("auto_sync")
  syncInterval  Int      @default(600) @map("sync_interval") // Seconds (10 min default)

  // Timestamps
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  // Relations
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("wallet_connections")
  @@unique([userId, address, blockchain])
  @@index([userId])
  @@index([address])
  @@index([blockchain])
  @@index([lastSyncAt])
}

// DeFi Protocol Tracking
model DefiProtocol {
  id            String   @id @default(uuid())

  // Protocol Details
  name          String   // Uniswap, Aave, Compound, Curve, etc.
  slug          String   @unique // uniswap-v3, aave-v2, etc.
  category      String   // dex, lending, staking, yield, derivatives
  blockchain    String   // ethereum, bsc, polygon, arbitrum, etc.

  // Protocol Metadata
  logoUrl       String?  @map("logo_url")
  website       String?
  tvl           Decimal? @db.Decimal(24, 2) // Total Value Locked

  // The Graph Integration
  subgraphUrl   String?  @map("subgraph_url") // The Graph subgraph endpoint
  isActive      Boolean  @default(true) @map("is_active")

  // Timestamps
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  // Relations
  positions     DefiPosition[]

  @@map("defi_protocols")
  @@index([blockchain])
  @@index([category])
  @@index([isActive])
}

// User's DeFi Positions
model DefiPosition {
  id            String   @id @default(uuid())
  userId        String   @map("user_id")
  protocolId    String   @map("protocol_id")
  walletAddress String   @map("wallet_address")
  blockchain    String   @default("ethereum") // ethereum, polygon, optimism, arbitrum, base, bsc

  // Position Details
  positionType  String   @map("position_type") // liquidity, lending, borrowing, staking, farming
  tokenSymbol   String   @map("token_symbol") // Primary token (ETH, USDC, etc.)
  amount        Decimal  @db.Decimal(24, 8) // Amount deposited/staked
  valueUsd      Decimal  @db.Decimal(18, 2) @map("value_usd") // USD value

  // Yield/Rewards
  apy           Decimal? @db.Decimal(8, 4) // Annual Percentage Yield
  rewardsEarned Decimal? @db.Decimal(24, 8) @map("rewards_earned")
  rewardsToken  String?  @map("rewards_token") // Token rewards are paid in

  // Additional Data
  metadata      Json?    // Store protocol-specific data (pool info, etc.)

  // Status
  status        String   @default("active") // active, closed, liquidated
  lastSyncAt    DateTime @default(now()) @map("last_sync_at")

  // Timestamps
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  // Relations
  protocol      DefiProtocol @relation(fields: [protocolId], references: [id])

  @@map("defi_positions")
  @@unique([userId, protocolId, walletAddress, blockchain, tokenSymbol])
  @@index([userId])
  @@index([protocolId])
  @@index([walletAddress])
  @@index([blockchain])
  @@index([status])
  @@index([lastSyncAt])
}

// NFT Collections
model NftCollection {
  id            String   @id @default(uuid())

  // Collection Details
  contractAddress String @unique @map("contract_address")
  blockchain    String   // ethereum, polygon, solana, etc.
  name          String
  slug          String   @unique
  symbol        String?

  // Collection Metadata
  imageUrl      String?  @map("image_url")
  description   String?  @db.Text
  externalUrl   String?  @map("external_url")

  // Market Data
  floorPrice    Decimal? @db.Decimal(18, 8) @map("floor_price")
  totalSupply   Int?     @map("total_supply")
  numOwners     Int?     @map("num_owners")
  volumeTotal   Decimal? @db.Decimal(24, 2) @map("volume_total")

  // Timestamps
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  // Relations
  nfts          Nft[]

  @@map("nft_collections")
  @@index([blockchain])
  @@index([slug])
}

// Individual NFTs
model Nft {
  id            String   @id @default(uuid())
  collectionId  String   @map("collection_id")
  userId        String   @map("user_id")

  // NFT Details
  tokenId       String   @map("token_id")
  name          String?
  description   String?  @db.Text
  imageUrl      String?  @map("image_url")

  // Ownership
  walletAddress String   @map("wallet_address")

  // Purchase Info
  purchasePrice Decimal? @db.Decimal(18, 8) @map("purchase_price")
  purchaseDate  DateTime? @map("purchase_date")

  // Current Value
  lastValuation Decimal? @db.Decimal(18, 8) @map("last_valuation")
  valuationDate DateTime? @map("valuation_date")

  // Metadata
  attributes    Json?    // NFT traits/attributes

  // Timestamps
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  // Relations
  collection    NftCollection @relation(fields: [collectionId], references: [id])

  @@map("nfts")
  @@unique([collectionId, tokenId, walletAddress])
  @@index([userId])
  @@index([collectionId])
  @@index([walletAddress])
}
