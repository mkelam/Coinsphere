version: '3.8'

services:
  # PostgreSQL Database with TimescaleDB
  postgres:
    image: timescale/timescaledb:latest-pg15
    container_name: coinsphere-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: coinsphere
      POSTGRES_USER: coinsphere
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - coinsphere-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U coinsphere -d coinsphere"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis (for caching)
  redis:
    image: redis:7-alpine
    container_name: coinsphere-redis
    restart: unless-stopped
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    networks:
      - coinsphere-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.prod
    container_name: coinsphere-backend
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 3001
      DATABASE_URL: postgresql://coinsphere:${DB_PASSWORD}@postgres:5432/coinsphere
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXPIRES_IN: 1h
      REFRESH_TOKEN_EXPIRES_IN: 7d
      COINGECKO_API_KEY: ${COINGECKO_API_KEY}
      REDIS_URL: redis://redis:6379
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - coinsphere-network
    volumes:
      - ./backend/logs:/app/logs
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.prod
      args:
        VITE_API_URL: ${VITE_API_URL}
        VITE_WS_URL: ${VITE_WS_URL}
    container_name: coinsphere-frontend
    restart: unless-stopped
    networks:
      - coinsphere-network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: coinsphere-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./deployment/nginx-docker.conf:/etc/nginx/nginx.conf:ro
      - ./deployment/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - backend
      - frontend
    networks:
      - coinsphere-network
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  nginx_logs:
    driver: local

networks:
  coinsphere-network:
    driver: bridge
