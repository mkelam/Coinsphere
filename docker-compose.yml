version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: timescale/timescaledb:latest-pg15
    container_name: coinsphere-postgres
    environment:
      POSTGRES_USER: coinsphere
      POSTGRES_PASSWORD: password
      POSTGRES_DB: coinsphere_dev
    ports:
      - '5432:5432'
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U coinsphere']
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: coinsphere-redis
    ports:
      - '6379:6379'
    volumes:
      - redis_data:/data
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: coinsphere-backend
    environment:
      NODE_ENV: development
      PORT: 3001
      DATABASE_URL: postgresql://coinsphere:password@postgres:5432/coinsphere_dev
      REDIS_URL: redis://redis:6379
      JWT_SECRET: dev-secret-key-change-in-production-min-32-chars
      # External API Keys
      COINGECKO_API_KEY: ${COINGECKO_API_KEY:-}
      LUNARCRUSH_API_KEY: ${LUNARCRUSH_API_KEY:-}
      LUNARCRUSH_USE_MCP: ${LUNARCRUSH_USE_MCP:-false}
      CRYPTOCOMPARE_API_KEY: ${CRYPTOCOMPARE_API_KEY:-}
      # Email
      SENDGRID_API_KEY: ${SENDGRID_API_KEY:-}
      SENDGRID_FROM_EMAIL: ${SENDGRID_FROM_EMAIL:-}
    ports:
      - '3001:3001'
    volumes:
      - ./backend:/app
      - backend_node_modules:/app/node_modules
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ['CMD-SHELL', 'node -e "require(''http'').get(''http://localhost:3001/health'', (r) => process.exit(r.statusCode === 200 ? 0 : 1))"']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    command: npm run dev

  # ML Service
  ml-service:
    build:
      context: ./ml-service
      dockerfile: Dockerfile
    container_name: coinsphere-ml
    environment:
      DATABASE_URL: postgresql://coinsphere:password@postgres:5432/coinsphere_dev
      MODEL_VERSION: v1.0.0
      TRAINING_BATCH_SIZE: 32
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_DB: 0
    ports:
      - '8000:8000'
    volumes:
      - ./ml-service:/app
      - ml_models:/app/models
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload

  # Frontend (Development)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    container_name: coinsphere-frontend-dev
    environment:
      VITE_API_BASE_URL: http://localhost:3001/api/v1
      VITE_WS_URL: ws://localhost:3001
    ports:
      - '5173:5173'
    volumes:
      - ./frontend:/app
      - frontend_node_modules:/app/node_modules
    depends_on:
      - backend
    command: npx vite --host 0.0.0.0

  # Adminer (Database GUI)
  adminer:
    image: adminer:latest
    container_name: coinsphere-adminer
    ports:
      - '8080:8080'
    depends_on:
      - postgres

volumes:
  postgres_data:
  redis_data:
  ml_models:
  backend_node_modules:
  frontend_node_modules:

networks:
  default:
    name: coinsphere-network
